1、定义对象的类
（1）对象的状态：也称之为特征或者属性
例如：圆有半径，这是它的属性；矩形有长和宽，这是它的属性

定义属性（特征、状态）要求具有不可再分性
例如：面积也可以认为是圆的一个属性，但是它可以由半径计算得出，因此是冗余的属性，定义时应该尽可能减少这样的冗余属性

（2）对象的行为：由方法定义，调用对象的一个方法，就要求对象完成一个动作。
例如：可以为圆定义一个getArea()的方法来获得面积

使用通用类来定义同一类型的对象，因此类可以说是一个模板、蓝本或者说合约

一个对象是类的一个实例，对象和实例经常可以互换

（3）构造方法
这是一类特殊的方法，调用这个方法可以创建一个新的对象
构造方法本身是可以完成任意动作的，但是设计构造方法的初衷还是为了完成初始化动作，例如：初始化对象的数据域

*****构造方法名必须与类名相同
*****构造方法没有返回值，甚至连void都没有
*****构造方法是在创建一个对象，使用new操作符时调用的
构造方法的作用是初始化对象
构造方法也可以重载

（4）主类：包含名为main的方法的类，被称作主类
没有main方法的类是不能运行的


2、UML类图（Unified Modeling Language，UML）
类的模板、对象的图解可以使用UML的图形符号进行标准化

一般而言，类图分为三层：
第一层是类名
第二层是数据域
第三层是方法


3、类的使用方法

（1）多个类可以放到同一个文件中，但是文件中只能有一个类是公共的，也就是：被public修饰的类只能有一个
（2）文件名必须与公共类的名字一样
public class TestCircle1{
	public static void main(String[] args){
		Circle1 circle1=new Circle1();
		System.out.println("The area of the circle of radius "+circle1.radius+" is "+circle1.getArea());
		
		Circle1 circle2=new Circle1(25);
		System.out.println("The area of the circle of radius "+circle2.radius+" is "+circle2.getArea());
	}
}
		
class Circle1{
	double radius;
		
	Circle1(){
		radius=1;
	}
		
	Circle1(double newRadius){
		radius=newRadius;
	}
		
	double getArea(){
		return radius*radius*Math.PI;
	}
}
上面这段代码，就是在一个文件里放两个类


4、Java库的类

（1）Date类
java.util.Date
public class test1{
	public static void main(String[] args){
		java.util.Date date=new java.util.Date();
		System.out.println("The elapsed time since Jan 1, 1970 is "+date.getTime()+" milliseconds");
		System.out.println(date.toString());
	}
}
输出：
The elapsed time since Jan 1, 1970 is 1536574486016 milliseconds
Mon Sep 10 18:14:46 GMT+08:00 2018
两个方法：
getTime():实例方法，获得时间，单位：微秒
toString():将从getTime()获得的时间转换为年、月日、小时、分钟、秒、星期

（2）Random类

之前学过：0.0<=Math.random()<1.0

java.util.Random
public class test1{
	public static void main(String[] args){
	//	Random ra=new Random();  <----------错误写法
		java.util.Random ra=new java.util.Random();
		System.out.println(ra.nextInt(20));
	}
}
Random();//括号里可以自己指定种子，不填默认为当前时间
next.typeName();//获得type类型的随机值，注意首字母大写
例如：nextInt、nextLong......

5、基本类型变量与引用类型变量
每个变量都代表着一个存储值的内存空间

对基本类型变量来说，对应内存存储的是基本类型的值

对引用类型变量来说，对应内存存储的是一个引用值，它是对象的存储地址

6、静态变量、常量、方法

（1）变量

未加static修饰的变量都是实例变量，实例变量是绑定到类的某个特定实例的，它不能被同一个类的不同对象所共享
例如：int a;

如果想让一个类的所有实例共享数据，可以使用静态变量，声明变量时，在变量类型前加修饰符static
例如：static int a;

（2）常量

一般来说，一个类里面的常量应该被这个类的所有实例共享
例如：
final static double PI=3.1415926

（3）方法

静态方法：可以不用创建实例，直接使用：类名.静态方法名
定义方法：加修饰符static

实例方法：这个方法绑定了一个实例，使用前必须创建一个实例，使用方法：实例名.方法名

创建方法时，如果这个方法不依赖于实例，则应该声明为静态方法

package test;
public class TestCircle2 {
	public static void main(String[] args){
		System.out.println("Before create object");
		System.out.println("The number of Circle object is"+Circle2.numberOfObjects);
		
		Circle2 c1=new Circle2();
		
		System.out.println("\nAfter create object c1");
		System.out.println("c1: radius ("+c1.radius+") and number of Circle object ("+Circle2.numberOfObjects+")");
		
		c1.radius=9.0;
		Circle2 c2=new Circle2(7.0);
		
		System.out.println("\nAfter create object c2 and modifying c1");
		System.out.println("c1: radius ("+c1.radius+") and number of Circle object ("+Circle2.numberOfObjects+")");
		System.out.println("c2: radius ("+c2.radius+") and number of Circle object ("+Circle2.numberOfObjects+")");
		
		System.out.println("c1: radius ("+c1.radius+") and area of Circle is "+c1.getArea());
		System.out.println("c2: radius ("+c2.radius+") and area of Circle is "+c2.getArea());
	}
}

package test;
public class Circle2 {
	double radius;
	static int numberOfObjects=0;
	
	Circle2(){
		radius=1;
		numberOfObjects++;
	}
	
	Circle2(double newRadius){
		radius=newRadius;
		numberOfObjects++;
	}
	
	static int getNumberOfCircle(){
		return numberOfObjects;
	}
	
	double getArea(){
		return radius*radius*Math.PI;
	}
}
输出：
Before create object
The number of Circle object is0

After create object c1
c1: radius (1.0) and number of Circle object (1)

After create object c2 and modifying c1
c1: radius (9.0) and number of Circle object (2)
c2: radius (7.0) and number of Circle object (2)
c1: radius (9.0) and area of Circle is 254.46900494077323
c2: radius (7.0) and area of Circle is 153.93804002589985

7、可见修饰符：public

被public修饰的类、方法、数据域，表示他们可以被任何类访问
没有使用可见修饰符，默认类、方法、数据域是可以被同一个包中的任何一个类访问的，这称作包私有或者包内访问

注意：包可以用来组织类，为了完成这个目标，需要在程序第一行写：
package packageName;

如果定义时没有声明包，则表示把它放进默认包

除了public修饰符外，还有private和protected修饰符

private修饰符限定的方法和数据域只能在它自己的类中被访问，
这里可以看出private不能修饰类

一个类如果没有被public修饰，那么它只能在同一个包内被访问

私有方法或者数据域前面加-

8、数据域封装
为了防止数据被篡改，为了方便维护，需要将数据域封装

因此将数据域定义为私有的（private），同时给出get（访问器）和set（修改器）


9、对象数组
和定义一般的数组一样：
类名[] 对象数组名 = new 类名[数组个数];

使用new创建数组、对象等等，其初始值会设置为默认值，引用类型的值被设为null
注意：
int i;
System.out.println(i);
这么做是会报错的


